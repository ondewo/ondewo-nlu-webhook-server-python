# Copyright 2021-2025 ONDEWO GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

services:

  # ----------------------------------------------------------------------
  # Service: ondewo-nlu-webhook-server-python
  # ----------------------------------------------------------------------
  ondewo-nlu-webhook-server-python:
    build:
      dockerfile: dockerfiles/ondewo-nlu-webhook-server-python.Dockerfile
      context: .
      target: ${ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_TARGET} # compile python code to Objective-C for speed improvements. Best for production.
      # target: uncythonized # run python code. Best for debugging.
      args:
        HOST_DOCKER_GID: ${HOST_DOCKER_GID}  # check *your* docker group id with: `getent group docker`
    networks:
      - ondewo-nlu-webhook-server-python-network
    ports:
      # Note: comment the following line to prevent accessing the webhook server without ssl via envoy
      - ${ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_SERVER_PORT}:${ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_SERVER_PORT}
    dns:
      - 127.0.0.11
      - 8.8.8.8
      - 1.1.1.1
    environment:
      # Analytics variables
      - HOST_DOCKER_GID
      - MODULE_NAME=${ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_MODULE_NAME}
      # Service environment variables
      - ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_SERVER_HOST
      - ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_SERVER_PORT
      - ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_HTTP_BASIC_AUTH_USERNAME
      - ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_HTTP_BASIC_AUTH_PASSWORD
      - ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_BEARER
      - ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_NR_OF_WORKERS
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_SERVER_PORT}/health || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  # ----------------------------------------------------------------------
  # Service: ondewo-ingress-envoy
  # ----------------------------------------------------------------------
  ondewo-ingress-envoy:
    image: ${ONDEWO_INGRESS_ENVOY_IMAGE_NAME}
    volumes:
      - ${ONDEWO_INGRESS_ENVOY_CONFIG_FILE}:/etc/envoy/envoy.yaml
      - ${ONDEWO_INGRESS_ENVOY_CERTS_PATH}:/etc/certs:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ondewo-nlu-webhook-server-python-network
    dns:
      - 127.0.0.11
    healthcheck:
      test: [ "CMD-SHELL", "test -n 'ps aux | grep envoy'" ]
      interval: 10s
      timeout: 30s
      retries: 3

networks:

  # ----------------------------------------------------------------------
  # Network: ondewo-nlu-webhook-server-python-network
  # ----------------------------------------------------------------------
  ondewo-nlu-webhook-server-python-network:
    name: ${ONDEWO_NLU_WEBHOOK_SERVER_PYTHON_DOCKER_NETWORK_NAME}
    # bridge	Creates a new network that is isolated from the host network.
    # host	    Connects the container directly to the host network.
    # overlay	Creates a network that spans multiple Docker hosts.
    # macvlan	Creates a virtual Ethernet interface in the container.
    # none	    Does not create a network for the container.
    driver: bridge
